/*-----------------------------------------------------------------------------------
    Template Name: Hietrade
    Template URI: https://boastack.com/
    Description: A better way to trade your crytpocurrency.
    Author: Boastack
    Author URI: https://boastack.com/
    Version: 1.0
-----------------------------------------------------------------------------------*/
// Create a media condition that targets viewports at least 769px
const mediaQuery = window.matchMedia('(min-width: 769px)');

// Navbar background
const toggler = document.querySelector(".navbar-toggler");
const navbar = document.querySelector(".navbar");
toggler.addEventListener("click", () => {
    if (navbar.classList.contains("navbar-bg")) {
        navbar.classList.remove("navbar-bg");
    } else {
        navbar.classList.add("navbar-bg");
    }
});

// Hero section heading animation
const resolver = {
    resolve: function resolve(options, callback) {
        const resolveString = options.resolveString || options.element.getAttribute('data-target-heading');
        const combinedOptions = Object.assign({}, options, { resolveString: resolveString });
        function getRandomInteger(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        function randomCharacter(characters) {
            return characters[getRandomInteger(0, characters.length - 1)];
        };
        function doRandomiserEffect(options, callback) {
            const characters = options.characters;
            const timeout = options.timeout;
            const element = options.element;
            const partialString = options.partialString;
            let iterations = options.iterations;
            setTimeout(() => {
                if (iterations >= 0) {
                    const nextOptions = Object.assign({}, options, { iterations: iterations - 1 });
                    if (iterations === 0) {
                        element.textContent = partialString;
                    } else {
                        element.textContent = partialString.substring(0, partialString.length - 1) + randomCharacter(characters);
                    }
                    doRandomiserEffect(nextOptions, callback)
                } else if (typeof callback === "function") {
                    callback();
                }
            }, options.timeout);
        };
        function doResolverEffect(options, callback) {
            const resolveString = options.resolveString;
            const characters = options.characters;
            const offset = options.offset;
            const partialString = resolveString.substring(0, offset);
            const combinedOptions = Object.assign({}, options, { partialString: partialString });
            doRandomiserEffect(combinedOptions, () => {
                const nextOptions = Object.assign({}, options, { offset: offset + 1 });
                if (offset <= resolveString.length) {
                    doResolverEffect(nextOptions, callback);
                } else if (typeof callback === "function") {
                    callback();
                }
            });
        };
        doResolverEffect(combinedOptions, callback);
    }
}
const strings = ['A better way to trade your digital assets.'];
let counter = 0;
const options = {
    offset: 0,
    timeout: 5,
    iterations: 10,
    characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'x', '#', '%', '&', '-', '+', '_', '?', '/', '\\', '='],
    resolveString: strings[counter],
    element: document.querySelector('[data-target-heading]')
}
// Callback function when resolve completes
function callback() {
    setTimeout(() => {
        counter++;
        if (counter >= strings.length) {
            counter = 0;
        }
        let nextOptions = Object.assign({}, options, { resolveString: strings[counter] });
        resolver.resolve(nextOptions, callback);
    }, 10000);
}
resolver.resolve(options, callback);

// Overlay preload animation
const words = ['Hietrade.'];
let counters = 0;
const choices = {
    offset: 0,
    timeout: 5,
    iterations: 10,
    characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'x', '#', '%', '&', '-', '+', '_', '?', '/', '\\', '='],
    resolveString: words[counters],
    element: document.querySelector('[data-target-loading]')
}
function preloader() {
    setTimeout(() => {
        counters++;
        if (counters >= words.length) {
            counters = 0;
        }
        let nextOptions = Object.assign({}, choices, { resolveString: words[counters] });
        resolver.resolve(nextOptions, preloader);
    }, 5000);
}
resolver.resolve(choices, preloader);

// Distorsion hover effects
const desktopAnimation = new hoverEffect({
    parent: document.querySelector('.hero-desktop'),
    intensity: 0.2,
    image1: 'assets/images/desktop-dark.png',
    image2: 'assets/images/desktop-white.png',
    displacementImage: 'assets/images/distorsion.png'
});
const mobileAnimation = new hoverEffect({
    parent: document.querySelector('.hero-mobile'),
    intensity: 0.2,
    image1: 'assets/images/mobile-dark.png',
    image2: 'assets/images/mobile-white.png',
    displacementImage: 'assets/images/distorsion.png'
});
const downloadAnimation = new hoverEffect({
    parent: document.querySelector('.download-img'),
    intensity: 0.2,
    image1: 'assets/images/mobile-dark.png',
    image2: 'assets/images/mobile-white.png',
    displacementImage: 'assets/images/distorsion.png'
});

// Predload overlay animation
gsap.registerPlugin(ScrollTrigger, SplitText);
gsap.to(".layer", {
    delay: 1,
    duration: 2,
    opacity: 0,
    yPercent: -100,
    ease: "expo.out",
    stagger: 0.25,
    yoyo: true
});

// Hero section animation
const hero = gsap.timeline({ delay: 1, yoyo: true });
hero.from(".header .navbar-brand", {
    duration: 1,
    opacity: 0,
    y: "random(-50, 50)",
    ease: "expo.out"
});
hero.from(".header .nav-link", {
    duration: 1,
    opacity: 0,
    y: 100,
    ease: "expo.out",
    stagger: {
        each: 0.25,
        from: "start"
    }
});
hero.from(".header .btn-navbar", {
    duration: 1,
    opacity: 0,
    x: 50,
    ease: "expo.out",
}, "<");
hero.from(".hero-heading", {
    duration: 1.5,
    opacity: 0,
    ease: "expo.out"
}, "<");
hero.from(".hero-subheading", {
    duration: 1.5,
    opacity: 0,
    y: 50,
    ease: "expo.out"
}, "<");
hero.from(".hero-svg", {
    duration: 1.5,
    opacity: 0,
    y: "random(-50, 50)",
    ease: "expo.out"
}, "<");
hero.to(".hero-svg", {
    keyframes: {
        "0%": { x: 0, y: 0 },
        "50%": { x: 0, y: 15 },
        "100%": { x: 0, y: -0 }
    },
    repeat: -1,
    duration: 3
});
hero.from(".hero-img", {
    duration: 1.5,
    opacity: 0,
    y: 100,
    ease: "expo.out"
}, 0);

// Getting started animation
const appStore = gsap.timeline({
    defaults: {
        duration: 1,
        opacity: 0,
        ease: "expo.out"
    },
    scrollTrigger: {
        trigger: ".get-started",
        start: "top center",
        end: "bottom top",
        scrub: 1
    }
});
appStore.from(".apple-store", { x: -50 }, 0);
appStore.from(".google-store", { x: 50 }, 0);

// All pattern animation
Array.from(document.querySelectorAll(".pattern")).forEach(el => {
    const pattern = gsap.timeline();
    pattern.set(el, { rotation: 45 });
    pattern.to(el, {
        yoyo: true,
        duration: 1,
        rotation: 90,
        ease: "expo.out",
        backgroundImage: "radial-gradient(rgba(12, 24, 37, 0.85) 15%, transparent 0), radial-gradient(rgba(12, 24, 37, 0.85) 15%, transparent 0)",
        scrollTrigger: {
            trigger: el,
            toggleActions: "restart pause resume reverse",
            start: "top center",
            end: "bottom top",
            scrub: 1
        }
    });
});

// All section heading animation
const createSplits = () => {
    Array.from(document.querySelectorAll(".section-heading")).forEach(el => {
        if (el.motion) {
            el.motion.progress(1).kill();
            el.split.revert();
        }
        el.split = new SplitText(el, {
            type: "lines,words,chars",
            linesClass: "split-lines"
        });
        el.motion = gsap.from(el.split.chars, {
            scrollTrigger: {
                trigger: el,
                toggleActions: "restart pause resume reverse",
                start: "top 80%",
                end: "bottom top"
            },
            y: "0%",
            color: "#ced1d3",
            duration: 0.02,
            rotationX: -0,
            ease: "none",
            stagger: {
                amount: 0.8,
                from: "start"
            }
        });
    });
}
ScrollTrigger.addEventListener("refresh", createSplits);
createSplits();

if (mediaQuery.matches) {
    // About section animation
    gsap.from(".about-section .card", {
        duration: 1,
        opacity: 0,
        x: 50,
        stagger: 0.5,
        ease: "expo.out",
        scrollTrigger: {
            trigger: ".get-started",
            start: "top center",
            end: "bottom top",
            scrub: 1
        }
    });

    // Features section animation
    gsap.from(".features-section .card", {
        duration: 1,
        opacity: 0,
        x: -50,
        stagger: 0.5,
        ease: "expo.out",
        scrollTrigger: {
            trigger: ".about-section",
            start: "top center",
            end: "bottom top",
            scrub: 1
        }
    });

    // About card hover animation
    // Array.from(document.querySelectorAll(".about-section .card")).forEach(el => {
    //     const aboutHover = gsap.timeline({ paused: true });
    //     aboutHover.to(el, { duration: 0.3, backgroundColor: "var(--bs-primary)", x: 30 });
    //     aboutHover.to(el.querySelector(".card-title"), { duration: 0, color: "var(--bs-white)" }, 0);
    //     aboutHover.to(el.querySelector(".card-text"), { duration: 0, color: "var(--bs-white)" }, 0);
    //     el.addEventListener("mouseenter", () => aboutHover.play());
    //     el.addEventListener("mouseleave", () => aboutHover.reverse());
    // });

    // Features card hover animation
    // Array.from(document.querySelectorAll(".features-section .card")).forEach(el => {
    //     const featureHover = gsap.timeline({ paused: true });
    //     featureHover.to(el, { duration: 0.3, backgroundColor: "var(--bs-primary)", x: -30 });
    //     featureHover.to(el.querySelector(".card-title"), { duration: 0, color: "var(--bs-white)" }, 0);
    //     featureHover.to(el.querySelector(".card-text"), { duration: 0, color: "var(--bs-white)" }, 0);
    //     el.addEventListener("mouseenter", () => featureHover.play());
    //     el.addEventListener("mouseleave", () => featureHover.reverse());
    // });

    // FAQs pinned section animation
    gsap.from(".faqs .card", {
        y: 50,
        opacity: 0,
        duration: 1,
        stagger: 0.25,
        ease: "expo.out",
        scrollTrigger: {
            trigger: ".faqs",
            pin: ".faqs-sticky",
            pinSpacing: false,
            start: "top 80px",
            end: "bottom bottom",
            scrub: 1
        }
    });

    // Downloads section animation
    gsap.from(".download-banner", {
        scale: 1.15,
        ease: "expo.out",
        scrollTrigger: {
            trigger: ".download",
            start: "top center",
            end: "bottom top",
            scrub: 1
        }
    });
    Array.from(document.querySelectorAll(".app-svg")).forEach(el => {
        const appHover = gsap.timeline({ paused: true });
        appHover.to(el, { duration: 0.3, y: -5 });
        el.addEventListener("mouseover", () => appHover.play());
        el.addEventListener("mouseleave", () => appHover.reverse());
    });
}

// FAQs section animation
const faqsContent = gsap.timeline({
    scrollTrigger: {
        trigger: ".faqs",
        start: "top center",
        end: "bottom top",
        scrub: 1
    }
});
faqsContent.from(".faqs-img", { scale: 1.2 });
faqsContent.to(".faqs-mask", { clipPath: "circle(100% at 50% 50%)" }, 0);
faqsContent.to(".faqs-mask", { duration: 1, scale: 1 });

// Footer section animation
Array.from(document.querySelectorAll(".footer-widget .nav-link")).forEach(el => {
    const navHover = gsap.timeline({ paused: true });
    navHover.to(el, { duration: 0.3, x: 5 });
    el.addEventListener("mouseover", () => navHover.play());
    el.addEventListener("mouseleave", () => navHover.reverse());
});

// Cursor animation
const cursor = document.getElementById("cursor");
// const interaction = document.getElementById("cursor-interaction");
const isCursor = (event) => {
    gsap.to(cursor, {
        duration: 0,
        x: event.clientX,
        y: event.clientY
    });
    // gsap.to(interaction, {
    //     duration: 0.5,
    //     x: event.clientX,
    //     y: event.clientY
    // });
}
window.addEventListener("mousemove", isCursor);
Array.from(document.querySelectorAll(".hover")).forEach(el => {
    el.addEventListener('mouseover', (event) => {
        event.stopPropagation();
        gsap.to(cursor, { duration: 0.05, scale: 2.8, borderColor: "transparent", background: "var(--bs-white)", mixBlendMode: "difference" });
        // gsap.to(interaction, { opacity: 0 }, 0);
    });
    el.addEventListener('mouseleave', (event) => {
        event.stopPropagation();
        gsap.to(cursor, { duration: 0.05, scale: 1, borderColor: "var(--bs-secondary)", background: "transparent", mixBlendMode: "normal" });
        // gsap.to(interaction, { opacity: 0 }, 0);
    });
});

// Hide notify after 10 seconds
setTimeout(() => {
    const notify = document.querySelector(".notify");
    notify.style.display = "none";
}, 10000);

// Get the current year
const year = new Date().getFullYear();
document.getElementById('year').textContent = year;

// console.clear();
console.log.apply(console, [
    "%c Proudly Developed by Balocreation %c %c👌 %c",
    "color: #fff; background: #0d60d8; padding: 5px 0;",
    "color: #fff; background: #0c1825; padding: 5px 0 5px 5px;",
    "background: #0c1825; padding: 5px 0",
    "background: #0c1825; padding: 5px 5px 5px 0",
]);
console.log.apply(console, [
    "%c Extrovert with a big mission: Transforming ideas into attractive, and innovative web apps.\n",
    "color: #fff; background: #0d60d8; padding: 5px 0;",
]);

// Spotlight clone function
let spotlight = $(".spotlight");
let spotlightWrapper = spotlight.find(".spotlight-wrapper");
let clonedSpotlight = spotlightWrapper.clone();
let spotlightWidth = 10;
spotlightWrapper.find(".spotlight-slide").each(function (i) {
    spotlightWidth += $(this, i).outerWidth(true);
});
let endPos = spotlight.width() - spotlightWidth;
spotlightWrapper.add(clonedSpotlight).css({
    "width": spotlightWidth + "px"
});
clonedSpotlight.addClass("cloned").appendTo(spotlight);

// Spotlight section animation
const time = 30;
const infinite = gsap.timeline({ repeat: -1, paused: true });
infinite.fromTo(spotlightWrapper, time, { rotation: 0.01, x: 0 }, { force3D: true, x: -spotlightWidth, ease: "none" }, 0);
infinite.fromTo(clonedSpotlight, time, { rotation: 0.01, x: spotlightWidth }, { force3D: true, x: 0, ease: "none" }, 0);
infinite.set(spotlightWrapper, { force3D: true, rotation: 0.01, x: spotlightWidth });
infinite.to(clonedSpotlight, time, { force3D: true, rotation: 0.01, x: -spotlightWidth, ease: "none" }, time);
infinite.to(spotlightWrapper, time, { force3D: true, rotation: 0.01, x: 0, ease: "none" }, time);
infinite.progress(1).progress(0);
infinite.play();

// Spotlight hover function	
spotlight.on("mouseenter", function () {
    infinite.pause();
}).on("mouseleave", function () {
    infinite.play();
});

// Initialize swiper slider
// const swiper = new Swiper('.swiper', {
//     slidesPerView: 3,
//     spaceBetween: 40,
//     mousewheel: true,
//     keyboard: true,
//     // loop: true,
//     // autoplay: {
//     //     delay: 500,
//     //     disableOnInteraction: true,
//     // },
//     breakpoints: {
//         0: {
//             slidesPerView: 1,
//             spaceBetween: 40,
//         },
//         768: {
//             slidesPerView: 2,
//             spaceBetween: 40,
//         },
//         1024: {
//             slidesPerView: 3,
//             spaceBetween: 40,
//         },
//     },
//     // Navigation arrows
//     navigation: {
//         nextEl: '.spotlight-next',
//         prevEl: '.spotlight-prev',
//     },
// });